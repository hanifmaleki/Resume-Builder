# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
orbs:
  heroku: circleci/heroku@1.2.2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - run:
          name: Install docker
          command: |
             ls
#            apt-get update --fix-missing
#            apt-get install -y apt-transport-https ca-certificates software-properties-common
#            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
#            apt-key fingerprint 0EBFCD88
#            add-apt-repository \
#            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
#            $(lsb_release -cs) \
#            stable"
#            apt-get update
#            apt-get install -y docker-ce
#            docker --version
      - setup_remote_docker
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: gradle test

      - run:
         name: Install jFrog CLI
         command: curl -fL https://getcli.jfrog.io | sh

      # Create Docker Image
#      - run:
#          name: Build application Docker image
#          command: |
#            docker build --build-arg JAR_FILE=build/libs/*.jar -t springio/gs-spring-boot-docker .

  deploy:
#    executor: heroku/default
    machine:
      image: ubuntu-1604:201903-01
    steps:
#        - heroku/install
        - run: curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
        - run: heroku version
        - run: echo $HEROKU_API_KEY
        - run: echo "$HEROKU_API_KEY"
        - run: echo '$HEROKU_API_KEY'
        - run: heroku apps
#        - checkout
#        - run: pwd
#        - run: ls -all
#        - run:
#            name: Add credentials
#            command: |
#              echo "machine git.heroku.com
#                login hanif_1362@yahoo.com
#                password $HEROKU_API_KEY
#
#              machine api.heroku.com
#                login hanif_1362@yahoo.com
#                password $HEROKU_API_KEY" > ~/.netrc
#        - run: heroku login
#        - run: git clone https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git

      #        - run: cat ~/.netrc
#        - run: set HEROKU_API_KEY=$HEROKU_API_KEY
#        - run: echo $HEROKU_API_KEY
#        - run: heroku auth:whoami
#        - run:  heroku logout
#        - run: heroku auth:token
#        - run: heroku login
#        - run: HEROKU_DEBUG=true HEROKU_DEBUG_HEADERS=1 heroku login HEROKU_API_KEY=$HEROKU_API_KEY
        - heroku/deploy-via-git
#        - run: git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master:master

#      - run: sudo heroku container:login
#      - run: heroku container:push web -a hanif-maleki
#      - run: heroku container:release web -a hanif-maleki
workflows:
  version: 2
  workflow:
    jobs:
      - build
      - deploy:
          requires:
            - build
